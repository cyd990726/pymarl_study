[INFO 00:41:36] pymarl Running command 'my_main'
[INFO 00:41:36] pymarl Started run with ID "75"
[DEBUG 00:41:36] pymarl Starting Heartbeat
[DEBUG 00:41:36] my_main Started
[INFO 00:41:36] my_main Experiment Parameters:
[INFO 00:41:36] my_main 

{   'action_selector': 'epsilon_greedy',
    'agent': 'rnn',
    'agent_output_type': 'q',
    'batch_size': 32,
    'batch_size_run': 1,
    'buffer_cpu_only': True,
    'buffer_size': 5000,
    'checkpoint_path': '',
    'critic_lr': 0.0005,
    'double_q': True,
    'env': 'sc2',
    'env_args': {   'continuing_episode': False,
                    'debug': False,
                    'difficulty': '7',
                    'game_version': None,
                    'heuristic_ai': False,
                    'heuristic_rest': False,
                    'map_name': '2s3z',
                    'move_amount': 2,
                    'obs_all_health': True,
                    'obs_instead_of_state': False,
                    'obs_last_action': False,
                    'obs_own_health': True,
                    'obs_pathing_grid': False,
                    'obs_terrain_height': False,
                    'obs_timestep_number': False,
                    'replay_dir': '',
                    'replay_prefix': '',
                    'reward_death_value': 10,
                    'reward_defeat': 0,
                    'reward_negative_scale': 0.5,
                    'reward_only_positive': True,
                    'reward_scale': True,
                    'reward_scale_rate': 20,
                    'reward_sparse': False,
                    'reward_win': 200,
                    'seed': 998840955,
                    'state_last_action': True,
                    'state_timestep_number': False,
                    'step_mul': 8},
    'epsilon_anneal_time': 50000,
    'epsilon_finish': 0.05,
    'epsilon_start': 1.0,
    'evaluate': False,
    'gamma': 0.99,
    'grad_norm_clip': 10,
    'hypernet_embed': 64,
    'hypernet_layers': 2,
    'label': 'default_label',
    'learner': 'q_learner',
    'learner_log_interval': 10000,
    'load_step': 0,
    'local_results_path': 'results',
    'log_interval': 10000,
    'lr': 0.0005,
    'mac': 'basic_mac',
    'mixer': 'qmix',
    'mixing_embed_dim': 32,
    'name': 'qmix',
    'obs_agent_id': True,
    'obs_last_action': True,
    'optim_alpha': 0.99,
    'optim_eps': 1e-05,
    'repeat_id': 1,
    'rnn_hidden_dim': 64,
    'runner': 'episode',
    'runner_log_interval': 10000,
    'save_model': False,
    'save_model_interval': 2000000,
    'save_replay': False,
    'seed': 998840955,
    't_max': 2050000,
    'target_update_interval': 200,
    'test_greedy': True,
    'test_interval': 10000,
    'test_nepisode': 32,
    'use_cuda': True,
    'use_tensorboard': False}

[INFO 00:41:38] my_main Beginning training for 2050000 timesteps
[INFO 00:41:42] absl Launching SC2: C:/Program Files (x86)/StarCraft II\Versions/Base91115\SC2_x64.exe -listen 127.0.0.1 -port 55901 -dataDir C:/Program Files (x86)/StarCraft II\ -tempDir C:\Users\29155\AppData\Local\Temp\sc-k40i0ylk\ -displayMode 0 -windowwidth 1920 -windowheight 1200 -windowx 50 -windowy 50
[INFO 00:41:42] absl Connecting to: ws://127.0.0.1:55901/sc2api, attempt: 0, running: True
[INFO 00:41:45] absl Connecting to: ws://127.0.0.1:55901/sc2api, attempt: 1, running: True
[INFO 00:41:48] absl Connecting to: ws://127.0.0.1:55901/sc2api, attempt: 2, running: True
[INFO 00:41:51] absl Connecting to: ws://127.0.0.1:55901/sc2api, attempt: 3, running: True
C:\Users\29155\Desktop\pymarl-master\pymarl-master\src\components\episode_buffer.py:120: UserWarning: Creating a tensor from a list of numpy.ndarrays is extremely slow. Please consider converting the list to a single numpy.ndarray with numpy.array() before converting to a tensor. (Triggered internally at C:\actions-runner\_work\pytorch\pytorch\builder\windows\pytorch\torch\csrc\utils\tensor_new.cpp:264.)
  v = th.tensor(v, dtype=dtype, device=self.device)
C:\Users\29155\Desktop\pymarl-master\pymarl-master\src\components\episode_buffer.py:120: UserWarning: To copy construct from a tensor, it is recommended to use sourceTensor.clone().detach() or sourceTensor.clone().detach().requires_grad_(True), rather than torch.tensor(sourceTensor).
  v = th.tensor(v, dtype=dtype, device=self.device)
[INFO 00:42:17] my_main t_env: 48 / 2050000
[INFO 00:42:17] my_main Estimated time left: 2 hours, 14 minutes, 40 seconds. Time passed: 39 seconds
